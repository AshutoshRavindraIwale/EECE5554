// Generated by gencpp from file gps_driver/gps_msgs.msg
// DO NOT EDIT!


#ifndef GPS_DRIVER_MESSAGE_GPS_MSGS_H
#define GPS_DRIVER_MESSAGE_GPS_MSGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace gps_driver
{
template <class ContainerAllocator>
struct gps_msgs_
{
  typedef gps_msgs_<ContainerAllocator> Type;

  gps_msgs_()
    : header()
    , Latitude(0.0)
    , Longitude(0.0)
    , Altitude(0.0)
    , Utm_easting(0.0)
    , Utm_northing(0.0)
    , Zone()
    , ZoneLetter()  {
    }
  gps_msgs_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Latitude(0.0)
    , Longitude(0.0)
    , Altitude(0.0)
    , Utm_easting(0.0)
    , Utm_northing(0.0)
    , Zone(_alloc)
    , ZoneLetter(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _Latitude_type;
  _Latitude_type Latitude;

   typedef double _Longitude_type;
  _Longitude_type Longitude;

   typedef double _Altitude_type;
  _Altitude_type Altitude;

   typedef double _Utm_easting_type;
  _Utm_easting_type Utm_easting;

   typedef double _Utm_northing_type;
  _Utm_northing_type Utm_northing;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _Zone_type;
  _Zone_type Zone;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ZoneLetter_type;
  _ZoneLetter_type ZoneLetter;





  typedef boost::shared_ptr< ::gps_driver::gps_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_driver::gps_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct gps_msgs_

typedef ::gps_driver::gps_msgs_<std::allocator<void> > gps_msgs;

typedef boost::shared_ptr< ::gps_driver::gps_msgs > gps_msgsPtr;
typedef boost::shared_ptr< ::gps_driver::gps_msgs const> gps_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gps_driver::gps_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gps_driver::gps_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gps_driver::gps_msgs_<ContainerAllocator1> & lhs, const ::gps_driver::gps_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Latitude == rhs.Latitude &&
    lhs.Longitude == rhs.Longitude &&
    lhs.Altitude == rhs.Altitude &&
    lhs.Utm_easting == rhs.Utm_easting &&
    lhs.Utm_northing == rhs.Utm_northing &&
    lhs.Zone == rhs.Zone &&
    lhs.ZoneLetter == rhs.ZoneLetter;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gps_driver::gps_msgs_<ContainerAllocator1> & lhs, const ::gps_driver::gps_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gps_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gps_driver::gps_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gps_driver::gps_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gps_driver::gps_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gps_driver::gps_msgs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_driver::gps_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_driver::gps_msgs_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gps_driver::gps_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24b26b8fd53a7bd4e0d9472d76a514cd";
  }

  static const char* value(const ::gps_driver::gps_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24b26b8fd53a7bd4ULL;
  static const uint64_t static_value2 = 0xe0d9472d76a514cdULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_driver::gps_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gps_driver/gps_msgs";
  }

  static const char* value(const ::gps_driver::gps_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gps_driver::gps_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 Latitude\n"
"float64 Longitude\n"
"float64 Altitude\n"
"float64 Utm_easting\n"
"float64 Utm_northing\n"
"string Zone\n"
"string ZoneLetter\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::gps_driver::gps_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gps_driver::gps_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Latitude);
      stream.next(m.Longitude);
      stream.next(m.Altitude);
      stream.next(m.Utm_easting);
      stream.next(m.Utm_northing);
      stream.next(m.Zone);
      stream.next(m.ZoneLetter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gps_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gps_driver::gps_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gps_driver::gps_msgs_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Latitude: ";
    Printer<double>::stream(s, indent + "  ", v.Latitude);
    s << indent << "Longitude: ";
    Printer<double>::stream(s, indent + "  ", v.Longitude);
    s << indent << "Altitude: ";
    Printer<double>::stream(s, indent + "  ", v.Altitude);
    s << indent << "Utm_easting: ";
    Printer<double>::stream(s, indent + "  ", v.Utm_easting);
    s << indent << "Utm_northing: ";
    Printer<double>::stream(s, indent + "  ", v.Utm_northing);
    s << indent << "Zone: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Zone);
    s << indent << "ZoneLetter: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ZoneLetter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPS_DRIVER_MESSAGE_GPS_MSGS_H
